import numpy as np

# Initialize the game board
def init_board():
    return np.zeros((3, 3), dtype=int)

# Print the board
def print_board(board):
    symbols = {1: 'X', -1: 'O', 0: '.'}
    for row in board:
        print(' '.join([symbols[elem] for elem in row]))
    print()

# Check if a move is valid
def is_valid_move(board, row, col):
    return board[row][col] == 0

# Make a move
def make_move(board, row, col, player):
    board[row][col] = player

# Check if the game is over and return the winner (1, -1, or 0 for draw)
def check_winner(board):
    for player in [1, -1]:
        # Check rows and columns
        for i in range(3):
            if np.all(board[i, :] == player) or np.all(board[:, i] == player):
                return player
        # Check diagonals
        if board[0, 0] == board[1, 1] == board[2, 2] == player or \
           board[0, 2] == board[1, 1] == board[2, 0] == player:
            return player
    # Check for draw
    if not np.any(board == 0):
        return 0
    # Game is not over
    return None

# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, alpha, beta, is_maximizing):
    winner = check_winner(board)
    if winner is not None:
        return winner
    
    if is_maximizing:
        max_eval = -float('inf')
        for i in range(3):
            for j in range(3):
                if is_valid_move(board, i, j):
                    board[i][j] = 1
                    eval = minimax(board, depth + 1, alpha, beta, False)
                    board[i][j] = 0
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        return max_eval
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if is_valid_move(board, i, j):
                    board[i][j] = -1
                    eval = minimax(board, depth + 1, alpha, beta, True)
                    board[i][j] = 0
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        return min_eval
        return min_eval

# Find the best move for the AI
def find_best_move(board):
    best_move = None
    best_value = -float('inf')
    for i in range(3):
        for j in range(3):
            if is_valid_move(board, i, j):
                board[i][j] = 1
                move_value = minimax(board, 0, -float('inf'), float('inf'), False)
                board[i][j] = 0
                if move_value > best_value:
                    best_value = move_value
                    best_move = (i, j)
    return best_move

# Main game loop
def play_game():
    board = init_board()
    print("Welcome to Tic-Tac-Toe!")
    print("You are 'O' (represented as -1) and the AI is 'X' (represented as 1).")
    print("Enter your move as two numbers separated by a space (e.g., '0 0' for the top-left corner).")
    print_board(board)
    
    human_player = -1
    ai_player = 1
    
    while True:
        # Human move
        try:
            row, col = map(int, input("Enter your move (row and column): ").split())
            if not (0 <= row <= 2 and 0 <= col <= 2):
                print("Invalid input. Row and column numbers must be between 0 and 2. Try again.")
                continue
            if not is_valid_move(board, row, col):
                print("Invalid move. The cell is already occupied. Try again.")
                continue
        except ValueError:
            print("Invalid input. Please enter two numbers separated by a space.")
            continue

        make_move(board, row, col, human_player)
        print_board(board)
        
        winner = check_winner(board)
        if winner is not None:
            break
        
        # AI move
        print("AI is making a move...")
        ai_move = find_best_move(board)
        make_move(board, ai_move[0], ai_move[1], ai_player)
        print_board(board)
        
        winner = check_winner(board)
        if winner is not None:
            break
    
    if winner == 0:
        print("The game is a draw!")
    elif winner == human_player:
        print("Congratulations! You won!")
    else:
        print("AI won! Better luck next time.")

if __name__ == "__main__":
    play_game()
